package ch.ennio.sileno.hoseabe

import android.app.AlertDialog
import android.graphics.Color
import android.graphics.ColorFilter
import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import android.widget.Toast
import androidx.fragment.app.activityViewModels
import androidx.navigation.Navigation
import ch.ennio.sileno.hoseabe.databinding.FragmentGameBinding
import java.lang.StringBuilder
import java.util.ArrayList

/**
 * A simple [Fragment] subclass.
 * Use the [fragment_game.newInstance] factory method to
 * create an instance of this fragment.
 */
class FragmentGame : Fragment() {
    private var _binding: FragmentGameBinding? = null
    private val binding get() = _binding!!

    private val playerListModel: PlayerListViewModel by activityViewModels()
    private var buttonsAreLocked: Boolean = true
    private lateinit var game: Game

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        //create new Game
        game = Game(playerListModel.getPlayerList().value!!)
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?): View? {
        //adapt also this name (the class will be autogenerated)
        _binding = FragmentGameBinding.inflate(inflater, container, false)
        setupAlertDialogBuilder()

        setupGameLoop()

        return binding.root
    }

    private fun setupAlertDialogBuilder() {
        binding.buttonEndGame.setOnClickListener {
            val alert: AlertDialog.Builder = AlertDialog.Builder(requireContext())
            alert.setTitle("Spiel beende")
            alert.setMessage("De Spielstand wird ned zwüschegspeicheret. Trotzdem beende?")
            alert.setNegativeButton("Nei, Wiiterspiele") { dialogInterface, i ->
                Toast.makeText(requireContext(), "Gueti Entscheidig :)", Toast.LENGTH_SHORT).show()
            }
            alert.setPositiveButton("Ja") { dialogInterface, i ->
                Navigation.findNavController(binding.root).navigate(R.id.navigate_game_main)
            }
            alert.create().show()
        }
    }

    fun setupGameLoop() {
        setupTradeCards()
        setupCurrentPlayer()
        initListeners()
    }

    private fun setupTradeCards() {
        val cardsToTrade = game.getCardsToTrade()
        val tradeCard1: ImageView = binding.tradeCard1
        val tradeCard2: ImageView = binding.tradeCard2
        val tradeCard3: ImageView = binding.tradeCard3


        tradeCard1.setImageResource(Auxiliary.getImageResource(cardsToTrade[0]))
        tradeCard2.setImageResource(Auxiliary.getImageResource(cardsToTrade[1]))
        tradeCard3.setImageResource(Auxiliary.getImageResource(cardsToTrade[2]))

        tradeCard1.colorFilter = null
        tradeCard2.colorFilter = null
        tradeCard3.colorFilter = null
    }

    private fun setupCurrentPlayer() {
        val player: Player = game.getCurrentPlayer()
        val playerCard1: ImageView = binding.playerCard1
        val playerCard2: ImageView = binding.playerCard2
        val playerCard3: ImageView = binding.playerCard3
        binding.textViewCurrentLifes.text = player.getLifes().toString()
        binding.textViewCurrentPlayer.text = player.getName()
        playerCard1.setImageResource(R.drawable.back2)
        playerCard1.tag = "0"
        playerCard1.colorFilter = null
        playerCard2.setImageResource(R.drawable.back2)
        playerCard2.tag = "0"
        playerCard2.colorFilter = null
        playerCard3.setImageResource(R.drawable.back2)
        playerCard3.tag = "0"
        playerCard3.colorFilter = null
    }

    fun initListeners() {
        binding.playerCard1.setOnClickListener {
            if(it.tag.toString().toInt() == 0) {
                binding.playerCard1.setImageResource(Auxiliary.getImageResource(game.getCurrentPlayer().getCardByIndex(0)))
                it.tag = "1"
                checkButtonsLocked()
            } else if(!buttonsAreLocked) {
                if((it as ImageView).colorFilter != null) {
                    it.colorFilter = null
                } else {
                    it.setColorFilter(Color.argb(170, 191, 54, 12))
                }
            } else {
                buttonsLockedMessage()
            }
        }
        binding.playerCard2.setOnClickListener {
            if(it.tag.toString().toInt() == 0) {
                binding.playerCard2.setImageResource(Auxiliary.getImageResource(game.getCurrentPlayer().getCardByIndex(1)))
                it.tag = "1"
                checkButtonsLocked()
            } else if(!buttonsAreLocked){
                if((it as ImageView).colorFilter != null) {
                    it.colorFilter = null
                } else {
                    it.setColorFilter(Color.argb(170, 191, 54, 12))
                }
            } else {
                buttonsLockedMessage()
            }
        }
        binding.playerCard3.setOnClickListener {
            if(it.tag.toString().toInt() == 0) {
                binding.playerCard3.setImageResource(Auxiliary.getImageResource(game.getCurrentPlayer().getCardByIndex(2)))
                it.tag = "1"
                checkButtonsLocked()
            } else if(!buttonsAreLocked){
                if((it as ImageView).colorFilter != null) {
                    it.colorFilter = null
                } else {
                    it.setColorFilter(Color.argb(170, 191, 54, 12))
                }
            } else {
                buttonsLockedMessage()
            }
        }
        binding.tradeCard1.setOnClickListener {
            if(!buttonsAreLocked) {
                if((it as ImageView).colorFilter != null) {
                    it.colorFilter = null
                } else {
                    it.setColorFilter(Color.argb(170, 191, 54, 12))
                }
            } else {
                buttonsLockedMessage()
            }
        }
        binding.tradeCard2.setOnClickListener {
            if(!buttonsAreLocked) {
                if((it as ImageView).colorFilter != null) {
                    it.colorFilter = null
                } else {
                    it.setColorFilter(Color.argb(170, 191, 54, 12))
                }
            } else {
                buttonsLockedMessage()
            }
        }
        binding.tradeCard3.setOnClickListener {
            if(!buttonsAreLocked) {
                if((it as ImageView).colorFilter != null) {
                    it.colorFilter = null
                } else {
                    it.setColorFilter(Color.argb(170, 191, 54, 12))
                }
            } else {
                buttonsLockedMessage()
            }
        }
        setupContinueButton()
        setupTradeAllCardsButton()
        setupPassButton()
        setupStopButton()
    }

    private fun checkButtonsLocked() {
        if("1" == binding.playerCard1.tag &&
           "1" == binding.playerCard2.tag &&
           "1" == binding.playerCard3.tag
        ) {
            buttonsAreLocked = false
        }
    }

    private fun setupContinueButton() {
        binding.buttonContinue.setOnClickListener {
            if (!buttonsAreLocked) {
                // Find out which two cards are selected
                val t1: ColorFilter? = binding.tradeCard1.colorFilter
                val t2: ColorFilter? = binding.tradeCard2.colorFilter
                val t3: ColorFilter? = binding.tradeCard3.colorFilter
                val p1: ColorFilter? = binding.playerCard1.colorFilter
                val p2: ColorFilter? = binding.playerCard2.colorFilter
                val p3: ColorFilter? = binding.playerCard3.colorFilter
                if (t1 != null && t2 != null //!= means filter is applied
                    || t1 != null && t3 != null
                    || t2 != null && t3 != null
                    || p1 != null && p2 != null
                    || p1 != null && p3 != null
                    || p2 != null && p3 != null
                ) {
                    // Invalid selection: more than one card per row
                    Toast.makeText(requireContext(), "Mit 'Wiiter' dörfsch nume 1 Charte tusche.", Toast.LENGTH_SHORT).show()
                } else if (t1 == null && t2 == null && t3 == null //== mean no filter applied -> no card got selected
                    || p1 == null && p2 == null && p3 == null
                ) {
                    // Invalid selection: just one or no cards
                    Toast.makeText(requireContext(), "Du muesch 1 Charte fu dir und 1 Charte usem Deck usgwählt ha.", Toast.LENGTH_SHORT).show()
                } else {
                    val middleCardIndex: Int
                    val playerCardIndex: Int
                    middleCardIndex = if (t1 != null) 0 else if (t2 != null) 1 else 2
                    playerCardIndex = if (p1 != null) 0 else if (p2 != null) 1 else 2
                    val gameState = game.updateGame(middleCardIndex, playerCardIndex)
                    handleGameState(gameState)
                }
            } else {
                buttonsLockedMessage()
            }
        }
    }

    private fun setupTradeAllCardsButton() {
        binding.buttonTradeAllCards.setOnClickListener {
            if (!buttonsAreLocked) {
                val gameState = game.updateGame(3, 3)
                handleGameState(gameState)
            } else {
                buttonsLockedMessage()
            }
        }
    }

    private fun setupPassButton() {
        binding.buttonSkip.setOnClickListener {
            if(!buttonsAreLocked) {
                if(!game.getIsFirstRound()) {
                    if(!game.getCurrentPlayer().hasSkipped) {
                        val gameState: GameState = game.updateGame(-2, -2)
                        handleGameState(gameState)
                    } else {
                        Toast.makeText(requireContext(), "Du hesch scho passed. Ih einere Spielrundi wird nume eimal passed!", Toast.LENGTH_SHORT).show()
                    }
                } else {
                    Toast.makeText(requireContext(), "Ide erste Spielrundi chasch ned passe!", Toast.LENGTH_SHORT).show()
                }
            } else {
                buttonsLockedMessage()
            }
        }
    }

    private fun setupStopButton() {
        binding.buttonStop.setOnClickListener {
            if(!buttonsAreLocked) {
                if (game.getIsFirstRound()) {
                    Toast.makeText(requireContext(), "Ide erste Spielrundi wird ned gstoppt!", Toast.LENGTH_SHORT).show()
                } else {
                    val gameState: GameState = game.updateGame(-1, -1)
                    handleGameState(gameState)
                }
            } else {
                buttonsLockedMessage()
            }
        }
    }

    fun handleGameState(gameState: GameState) {
        if (gameState.equals(GameState.GAME_FINISHED)) {
            val winner: String = game.getWinner()
            if (!winner.isEmpty()) {
                Toast.makeText(requireContext(), "S spiel isch fertig. $winner het gwunne!", Toast.LENGTH_SHORT).show()
            } else {
            Toast.makeText(requireContext(), "SS spiel isch fertig! Es git kein gwünner!", Toast.LENGTH_SHORT).show()
            }
            Navigation.findNavController(binding.root).navigate(R.id.navigate_game_main)
        } else {
            if (gameState.equals(GameState.ROUND_FINISHED)) {
                var toastText: String = ""
                val removedPlayersArray: ArrayList<String> = game.getRemovedPlayers()
                if (removedPlayersArray.size > 0) {
                    val removedPlayers = StringBuilder()
                    for (i in removedPlayersArray.indices) {
                        removedPlayers.append(removedPlayersArray[i])
                        if (i < removedPlayersArray.size - 1) removedPlayers.append(", ")
                    }
                    toastText = "${removedPlayers} gheit usse!"
                }
                toastText = "Drundi isch fertig. " + toastText
                Toast.makeText(requireContext(), toastText, Toast.LENGTH_SHORT).show()
            }
            buttonsAreLocked = true
            setupTradeCards()
            setupCurrentPlayer()
        }
    }

    private fun buttonsLockedMessage() {
        Toast.makeText(requireContext(), "Du muesch zerst dini Charte umdreihe bevor en Spielzug mache chasch", Toast.LENGTH_SHORT).show()
    }
}