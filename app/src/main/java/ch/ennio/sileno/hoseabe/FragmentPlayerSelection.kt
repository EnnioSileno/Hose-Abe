package ch.ennio.sileno.hoseabe

import android.annotation.SuppressLint
import android.content.Context
import android.graphics.Color
import android.os.Bundle
import android.text.InputType
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.inputmethod.InputMethodManager
import android.widget.EditText
import android.widget.LinearLayout
import androidx.core.content.res.ResourcesCompat
import androidx.fragment.app.activityViewModels
import androidx.navigation.Navigation
import ch.ennio.sileno.hoseabe.databinding.FragmentPlayerSelectionBinding
import java.util.HashMap

/**
 * A simple [Fragment] subclass.
 * Use the [FragmentPlayerSelection.newInstance] factory method to
 * create an instance of this fragment.
 */
class FragmentPlayerSelection : Fragment() {
    private var _binding: FragmentPlayerSelectionBinding? = null
    private val binding get() = _binding!!

    private val playerCountModel:  PlayerCounterViewModel by activityViewModels()
    private val playerListModel: PlayerListViewModel by activityViewModels()
    private val editTexts = HashMap<String, EditText>()

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?): View? {
        //adapt also this name (the class will be autogenerated)
        _binding = FragmentPlayerSelectionBinding.inflate(inflater, container, false)
        playerListModel.getPlayerList().value!!.clear()

        makeKeyboardSoftHide()
        createDynamicEditTextView(playerCountModel.getValue())
        initButtonListener()

        return binding.root
    }

    @SuppressLint("ClickableViewAccessibility")
    fun makeKeyboardSoftHide() {
        binding.frameLayout2.setOnTouchListener { view, motionEvent ->
            view.performClick()
            val imm: InputMethodManager = requireActivity().getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
            imm.hideSoftInputFromWindow(view.windowToken, 0)
        }
    }

    private fun createDynamicEditTextView(playerCount: Int) {
        for (i in 0 until playerCount) {
            val editText = EditText(requireContext())
            editText.layoutParams =
                LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                )
            editText.id = i
            editText.setEms(10)
            editText.hint = "Spieler " + (i + 1)
            editText.setTextColor(ResourcesCompat.getColor(resources, R.color.font_color, null))
            editText.setHintTextColor(Color.LTGRAY)
            editText.maxLines = 1
            editText.inputType = InputType.TYPE_CLASS_TEXT
            binding.linearLayoutPlayerName.addView(editText)
            editTexts.put("player$i", editText)
        }
    }

    private fun initButtonListener() {
        binding.buttonStartGame.setOnClickListener {
            getPlayerNames()
            println(playerListModel.getPlayerList().value)
            Navigation.findNavController(binding.root).navigate(R.id.navigate_player_game)
        }
    }

    private fun getPlayerNames() {
        for (i in 0 until playerCountModel.getValue()) {
            val key = "player$i"
            var name = editTexts[key]!!.text.toString()
            name.trim()
            if(name.equals("")) {
                name = editTexts[key]!!.hint.toString()
            }
            playerListModel.getPlayerList().value!!.add(name)
        }
    }
}
